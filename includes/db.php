<?php

    if ( !isset( $_SESSION ) ) {
        
        header( 'HTTP/1.0 404 File Not Found', 404 );
        include 'views/404.php';
        exit();

    }
    
    /**
     * A class manages the database.
     */
	class DB {
	    
	    /**
         * Connect to the database.
         * @return object Returns the PHP Data Object (PDO). 
         */
	    private static function getDB() {
		    
		    $db = unserialize( DB );
		    
		    try {
			 
			    return new PDO( 'mysql:host=' . $db['db_host'] . ';dbname=' . $db['db_name'] , $db['db_user'], $db['db_pwd'] );
			    
		    } catch ( PDOException $e ) {
			    
			    exit( 'Connection to database failed.' );
			    
		    }
	
	    }
	    
	    
	    /**
         * GOOGLE API RELATED DATABASE QUERY FUNCTIONS
         * @ignore
         */
	    
	    
	    /**
         * Check if Google user exists in the database.
         * @param int $id Google User ID
         * @return boolean 
         */
	    public static function googleUserExists( $id ) {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'SELECT COUNT(*) FROM external_acct WHERE user_id = :id AND type = :type';
                $query = $db->prepare( $sql );
                $query->execute( array( ':id' => $id,
                                        ':type' => 'Google' ) );
                
                if ( $query->fetchColumn() == 1 ) {
                    
                    $db = null;
                    
                    return TRUE;
                    
                }
                
                $db = null;
                
                return FALSE;
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Fail to get Google User.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Add Google user to the database.
         * @param string $email User email address
         * @param string $first_name User first name
         * @param string $last_name User last name
         * @param int $id Google User ID
         * @param string $token Google refresh token generated by OAuth2
         * @return int Returns the Google user ID. 
         */
	    public static function addGoogleUser( $email, $first_name, $last_name, $id, $token ) {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    if ( DB::getUserByGoogle( $email ) == null ) {
            	    
            	    $userSQL = 'INSERT INTO user(email, first_name, last_name) VALUES( '
                    . ':email, :first_name, :last_name )';
                
                    $query = $db->prepare( $userSQL );
                    $query->execute( array( ':email' => $email,
                                            ':first_name' => $first_name,
                                            ':last_name' => $last_name ) );
                                            
        	    }
        	    
                $exAcctSQL = 'INSERT INTO external_acct(email, type, user_id, token) VALUES( '
                . ':email, :type, :id, :token )';
                 
                $query = $db->prepare( $exAcctSQL );
                $query->execute( array( ':email' => $email,
                                        ':type' => 'Google',
                                        ':id'=>$id,
                                        ':token'=>$token ) );
                
                $id = $db->lastInsertId();
                
                $db = null;
                
                return $id;
        	    
    	    } catch ( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to add Google User.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Get Google user's refresh token from the database.
         * @param int $id Google user ID
         * @return string\null Returns the Google user's refresh token or null if not found. 
         */
	    public static function getGoogleRefreshToken( $email ) {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'SELECT token FROM external_acct WHERE email = :email AND type = :type';
                
                $query = $db->prepare( $sql );
                $query->execute( array( ':email' => $email,
                                        ':type' => 'Google' ) );
                $query->setFetchMode( PDO::FETCH_ASSOC );
                
                $db = null;
        
                if ( $query->rowCount() == 1 ) {
                    
                    $result = $query->fetch();
                    
                    return $result['token'];
                    
                }
                
                return null;
        	    
    	    } catch ( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get Goole refresh token.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Set Google user's refresh token to the database.
         * @param int $id Google user ID
         * @param string $token Google user refresh token
         * @return int Returns the number of roles updated in database. 
         */
	    public static function setGoogleRefreshToken( $id, $token ) {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'UPDATE external_acct SET token = :token WHERE user_id = :id AND type = :type';
                $query = $db->prepare( $sql );
                $query->execute( array( ':token' => $token, ':id' => $id, ':type' => 'Google' ) );
                
                $db = null;
                
                return $query->rowCount();
        	    
    	    } catch ( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to set Goole refresh token.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Get user ID with Google user ID from the database.
         * @param int $id Google user ID
         * @return int|null Returns the user ID or null if not found. 
         */
	    public static function getUserByGoogle( $email ) {
    	
        	$db = DB::getDB();
        	    
    	    try {
        	    
        	    $sql = 'SELECT email FROM user WHERE email = :email';
                $query = $db->prepare( $sql );
                $query->execute( array( ':email' => $email ) );
                
                $db = null;
        
                if ( $query->rowCount() == 1 ) {
                    
                    $result = $query->fetch();
                    return $result['email'];
                    
                }
                
                return null;
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get ID by Google.' );
        	    
    	    }
        	
    	}
    	
    	/**
         * Delete Google external account after disconnect
         * @param string $email Google email
         * @return null. 
         */
	    public static function deleteUserByGoogle( $email ) {
    	
        	$db = DB::getDB();
        	    
    	    try {
        	    
        	    $sql = 'DELETE FROM external_acct WHERE email = :email AND type = :type';
                $query = $db->prepare( $sql );
                $query->execute( array( ':email' => $email,
                                        ':type' => 'Google' ) );
                
                $db = null;
                return null;
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to delete Google account.' );
        	    
    	    }
        	
    	}
    	
    	
    	/**
         * LTI RELATED DATABASE QUERY FUNCTIONS
         * @ignore
         */
    	
    	
    	/**
         * Get a LTI exercise.
         * @param int $exercise_id Exercise ID
         * @param int $course_id Course ID
         * @param string $code LMS family code
         * @return array|null Returns an array of exercise information or null if not found. 
         */
    	public static function getLTIExercise( $exercise_id, $course_id, $code ) {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'SELECT e.exercise_id, e.video_src, e.markup_src, e.name, e.description, e.attempts, e.allow_retake, e.allow_new, ce.status status_id, e.exrs_type_id, e.category_id, ce.created_on ';
        	    $sql .='FROM exercise e JOIN lti_consumer_course_exercise ce USING(exercise_id) JOIN lti_consumer c USING(consumer_id) ';
        	    $sql .= 'WHERE exercise_id = :id ';
        	    $sql .= 'AND course_id = :course ';
        	    $sql .= 'AND family_code = :code ';
        	    $sql .= 'AND status = 1';
        	    
                $query = $db->prepare( $sql );
                $query->execute( array( 
                    
                    ':id' => $exercise_id,
                    ':course' => $course_id,
                    ':code' => $code
                
                ) );
                $query->setFetchMode( PDO::FETCH_ASSOC );
                
                $db = null;
        
                if ( $query->rowCount() == 1 ) {
                    
                    $result = $query->fetch();
                    return $result;
                    
                }
                
                return null;
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get the LTI exercise.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Get all active LTI exercises.
         * @param int $course_id Course ID
         * @param string $code LMS family code
         * @return array Returns an array of exercises. 
         */
	    public static function getActiveLTIExercises( $course_id, $code ) {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'SELECT e.exercise_id, e.name ';
        	    $sql .= 'FROM exercise e JOIN lti_consumer_course_exercise ce USING(exercise_id) JOIN lti_consumer c USING(consumer_id) ';
        	    $sql .= 'WHERE course_id = :course ';
        	    $sql .= 'AND family_code = :code ';
        	    $sql .= 'AND status = 1';
                $query = $db->prepare( $sql );
                $query->execute( array( 
                    
                    ':course' => $course_id,
                    ':code' => $code
                
                ) );
                
                $query->setFetchMode( PDO::FETCH_ASSOC );
                
                $exercises = array();
            
                while ( $row = $query->fetch() ) {
                    
                    array_push( $exercises, $row );
                    
                }
                
                $db = null;
                
                return $exercises;
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get active exercises.' );
        	    
    	    }
    	    
	    }
	    
	    
	    /**
         * GENERAL DATABASE QUERY FUNCTIONS
         * @ignore
         */
	    
	    
	    /**
         * Check if user exists in the database.
         * @param int $id User ID
         * @return boolean 
         */
	    public static function userExists( $id ) {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'SELECT COUNT(*) FROM user WHERE user_id = :id';
                $query = $db->prepare( $sql );
                $query->execute( array( ':id' => $id ) );
                
                if ( $query->fetchColumn() == 1 ) {
                    
                    $db = null;
                    
                    return TRUE;
                    
                }
                
                $db = null;
                
                return FALSE;
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get user.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Get user ID based on signed in email
         * @param int $id User ID
         * @return boolean 
         */
	    public static function getUserId( $email ) {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'SELECT user_id FROM user WHERE email = :email';
                $query = $db->prepare( $sql );
                $query->execute( array( ':email' => $email ) );
                
                if ( $query->rowCount() == 1 ) {
                    
                    $result = $query->fetch();
                    return $result['user_id'];
                    
                }
                
                $db = null;
                
                return FALSE;
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get user.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Get all exercises from the database.
         * @return array Returns an array of exercises. 
         */
	    public static function getExercises() {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'SELECT exercise_id, name FROM exercise';
                $query = $db->prepare( $sql );
                $query = $db->query( $sql );
                $query->setFetchMode( PDO::FETCH_ASSOC );
                
                $exercises = array();
            
                while ( $row = $query->fetch() ) {
                    
                    array_push( $exercises, $row );
                    
                }
                
                $db = null;
                
                return $exercises;
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get exercises.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Get all active exercises from the database.
         * @return array Returns an array of active exercises. 
         */
	    public static function getActiveExercises( $limit, $sort ) {

    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    if ( isset( $sort ) || !empty( $sort ) ) {
        	        
        	        $sql = 'SELECT exercise.exercise_id, exercise.video_src, exercise.name, exercise.description, exercise_type.name AS type_name FROM exercise JOIN exercise_type WHERE exercise.status_id = 1 AND exercise.exrs_type_id = exercise_type.exrs_type_id ORDER BY (CASE exercise_type.name WHEN \'' . $sort . '\' THEN 1 ELSE 2 END) ASC, exercise.exercise_id ASC LIMIT ' . $limit;
        	        
        	    } else {
            	    
            	    $sql = 'SELECT exercise.exercise_id, exercise.video_src, exercise.name, exercise.description, exercise_type.name AS type_name FROM exercise JOIN exercise_type WHERE exercise.status_id = 1 AND exercise.exrs_type_id = exercise_type.exrs_type_id ORDER BY exercise.exercise_id ASC LIMIT ' . $limit;
            	    
        	    }
        	    
                $query = $db->prepare( $sql );
                $query = $db->query( $sql );
                $query->setFetchMode( PDO::FETCH_ASSOC );
                
                $exercises = array();
            
                while ( $row = $query->fetch() ) {
                    
                    array_push( $exercises, $row );
                    
                }
                
                $db = null;
                
                return $exercises;
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get active exercises.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Get all active non-assessment exercises from the database.
         * @return array Returns an array of active exercises. 
         */
	    public static function getActiveNonAssessmentExercises( $limit, $sort ) {

    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    if ( isset( $sort ) || !empty( $sort ) ) {
            	    
            	    $sql = 'SELECT exercise.exercise_id, exercise.video_src, exercise.name, exercise.description, exercise_type.name AS type_name FROM exercise JOIN exercise_type WHERE exercise.status_id = 1 AND exercise.exrs_type_id = exercise_type.exrs_type_id AND exercise_type.exrs_type_id <> 5 ORDER BY (CASE exercise_type.name WHEN \'' . $sort . '\' THEN 1 ELSE 2 END) ASC, exercise.exercise_id ASC LIMIT ' . $limit;
            	    
        	    } else {
            	    
            	    $sql = 'SELECT exercise.exercise_id, exercise.video_src, exercise.name, exercise.description, exercise_type.name AS type_name FROM exercise JOIN exercise_type WHERE exercise.status_id = 1 AND exercise.exrs_type_id = exercise_type.exrs_type_id AND exercise_type.exrs_type_id <> 5 ORDER BY exercise.exercise_id ASC LIMIT ' . $limit;
            	    
        	    }
        	    
                $query = $db->prepare( $sql );
                $query = $db->query( $sql );
                $query->setFetchMode( PDO::FETCH_ASSOC );
                
                $exercises = array();
            
                while ( $row = $query->fetch() ) {
                    
                    array_push( $exercises, $row );
                    
                }
                
                $db = null;
                
                return $exercises;
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get active exercises.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Get number of all non-assessment exercises from the database.
         * @return array Returns an array of active exercises. 
         */
	    public static function getNumOfActiveNAExercises() {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'SELECT COUNT(*) FROM exercise WHERE status_id = 1 AND exrs_type_id <> 5';
                $query = $db->prepare( $sql );
                $query = $db->query( $sql );
                $result = $query->fetch( PDO::FETCH_NUM );
                    
                $db = null;
                return (int)$result[0];
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get attempts.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Get number of all exercises from the database.
         * @return array Returns an array of active exercises. 
         */
	    public static function getNumOfActiveExercises() {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'SELECT COUNT(*) FROM exercise WHERE status_id = 1';
                $query = $db->prepare( $sql );
                $query = $db->query( $sql );
                $result = $query->fetch( PDO::FETCH_NUM );
                    
                $db = null;
                return (int)$result[0];
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get attempts.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Get an exercise from the database.
         * @param int $id Exercise ID
         * @return array|null Returns an array of exercise information or null if not found. 
         */
	    public static function getActiveExercise( $id ) {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'SELECT exr.*, exercise_type.name AS exr_type_name FROM exercise AS exr JOIN exercise_type ON exr.exrs_type_id = exercise_type.exrs_type_id WHERE exr.exercise_id = :id AND exr.status_id = 1';
                $query = $db->prepare( $sql );
                $query = $db->prepare( $sql );
                $query->execute( array( ':id' => $id ) );
                $query->setFetchMode( PDO::FETCH_ASSOC );
                
                $db = null;
        
                if ( $query->rowCount() == 1 ) {
                    
                    $result = $query->fetch();
                    return $result;
                    
                }
                
                return null;
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get exercise.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Get an active non-assessment exercise from the database.
         * @param int $id Exercise ID
         * @return array|null Returns an array of exercise information or null if not found. 
         */
	    public static function getActiveNAExercise( $id ) {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'SELECT exr.*, exercise_type.name AS exr_type_name FROM exercise AS exr JOIN exercise_type ON exr.exrs_type_id = exercise_type.exrs_type_id WHERE exr.exercise_id = :id AND exr.status_id = 1 AND exr.exrs_type_id <> 5';
                $query = $db->prepare( $sql );
                $query->execute( array( ':id' => $id ) );
                $query->setFetchMode( PDO::FETCH_ASSOC );
                
                $db = null;
        
                if ( $query->rowCount() == 1 ) {
                    
                    $result = $query->fetch();
                    return $result;
                    
                }
                
                return null;
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get exercise.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Set an user and an exercise with the number of attempts made to the database.
         * @param int $user_id User ID
         * @param int $exercise_id Exercise ID
         * @param int $attemt Number of attempts
         * @return int Returns last insert ID. 
         */
         public static function setUserExercise( $user_email, $exercise_id ) {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'INSERT INTO user_exercise(user_id, exercise_id) VALUES( '
                . ':user, :exercise )';
                
                $query = $db->prepare( $sql );
                $query->execute( array( ':user' => DB::getUserId( $user_email ),
                                        ':exercise' => $exercise_id ) );
                
                $id = $db->lastInsertId();
                
                $db = null;
                
                return $id;
        	    
    	    } catch ( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to set user exercise.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Get number of attempts for an exercise and user from the database.
         * @param int $user_id User ID
         * @param int $exercise_id Exercise ID
         * @return int Returns number of attempts. 
         */
	    public static function userExerciseExists( $user_email, $exercise_id ) {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'SELECT COUNT(*) FROM user_exercise WHERE user_id = :user AND exercise_id = :exercise';
                $query = $db->prepare( $sql );
                $query->execute( array( ':user' => DB::getUserID( $user_email ), ':exercise' => $exercise_id ) );
                $result = $query->fetch( PDO::FETCH_NUM );
                    
                $db = null;
                return (int)$result[0];
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get attempts.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Get number of attempts for an exercise and user from the database.
         * @param int $id Student exercise ID
         * @param string $src File path to the result json file.
         * @return int Returns number row updated. 
         */
	    public static function updateStuSrc( $id, $src ) {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'UPDATE user_exercise SET stu_src = :src WHERE stu_exrs_id = :id';
                $query = $db->prepare( $sql );
                $query->execute( array( ':src' => $src, ':id' => $id ) );
                
                $db = null;
                return $query->rowCount();
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to update StuSrc.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Add score to the database.
         * @param int $id Student exercise ID
         * @param double $score The score in decimals
         * @return int Returns last inserted ID. 
         */
	    public static function setScore( $id, $score ) {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'UPDATE user_exercise SET grade = :score WHERE stu_exrs_id = :id';
                
                $query = $db->prepare( $sql );
                $query->execute( array( ':id'=>$id, ':score'=>$score ) );
                
                $id = $db->lastInsertId();
                $db = null;
                
                return $id;
        	    
    	    } catch ( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to add score.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Add score to the database.
         * @param int $id Student exercise ID
         * @param double $score The score in decimals
         * @return int Returns last inserted ID. 
         */
	    public static function getScore( $id ) {
    	    
    	    $db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'SELECT grade FROM user_exercise WHERE stu_exrs_id = :id';
                
                $query = $db->prepare( $sql );
                $query->execute( array( ':id'=>$id ) );
                
                if ( $query->rowCount() == 1 ) {
                    
                    $result = $query->fetch();
                    return $result['grade'];
                    
                }
                
                $db = null;
                
                return null;
        	    
    	    } catch ( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to add score.' );
        	    
    	    }
    	    
	    }
	    
	    /**
         * Get the role of the user.
         * @param int $id User ID
         * @return int|null Returns the role ID or null if not found. 
         */
	    public static function getRole( $id ) {
    	
        	$db = DB::getDB();
        	    
    	    try {
        	    
        	    $sql = 'SELECT role_id FROM user WHERE user_id = :id';
                $query = $db->prepare( $sql );
                $query->execute( array( ':id' => $id ) );
                
                $db = null;
        
                if ( $query->rowCount() == 1 ) {
                    
                    $result = $query->fetch();
                    return $result['role_id'];
                    
                }
                
                return null;
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get role.' );
        	    
    	    }
        	
    	}
    	
    	/**
         * Get the exercise types.
         * @param none
         * @return int|null Returns the role ID or null if not found. 
         */
	    public static function getExerciseTypes() {
    	
        	$db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'SELECT exrs_type_id, name FROM exercise_type WHERE exrs_type_id <> 2';
                $query = $db->prepare( $sql );
                $query = $db->query( $sql );
                $query->setFetchMode( PDO::FETCH_ASSOC );
                
                $types = array();
            
                while ( $row = $query->fetch() ) {
                    
                    array_push( $types, $row );
                    
                }
                
                $db = null;
                
                return $types;
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get exercise types.' );
        	    
    	    }
        	
    	}
    	
    	/**
         * Get the exercise type name by type ID.
         * @param none
         * @return string|null Returns the type name or null if not found. 
         */
	    public static function getExerciseTypeName( $id ) {
    	
        	$db = DB::getDB();
    	    
    	    try {
        	    
        	    $sql = 'SELECT name FROM exercise_type WHERE exrs_type_id = :id LIMIT 1';
                $query = $db->prepare( $sql );
                $query->execute( array( ':id' => $id ) );
                
                $db = null;
                
                if ( $query->rowCount() == 1 ) {
                    
                    $result = $query->fetch();
                    return $result['name'];
                    
                }
                
                return null;
        	    
    	    } catch( PDOException $e ) {
        	    
        	    $db = null;
        	    exit( 'Failed to get exercise types.' );
        	    
    	    }
        	
    	}
	
	} // enc DB class

?>